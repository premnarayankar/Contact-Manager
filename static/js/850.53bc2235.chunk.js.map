{"version":3,"file":"static/js/850.53bc2235.chunk.js","mappings":"gMAsHA,UAlHqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,QAAQH,WAAWI,MAApC,IACzBC,GAAWJ,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,QAAQH,WAAWM,IAApC,IAE7B,GAA8BC,EAAAA,EAAAA,UAAS,CACrCC,GAAI,EACJC,KAAM,GACNN,QAAS,GACTO,MAAO,KAJT,eAAOP,EAAP,KAAgBQ,EAAhB,KAOA,GAAwBJ,EAAAA,EAAAA,UAAS,CAC/BC,GAAI,EACJC,KAAM,GACNN,QAAS,GACTO,MAAO,KAJT,eAAOE,EAAP,KAAaC,EAAb,MAOAC,EAAAA,EAAAA,YAAU,WACJd,GACFa,EAAQ,CACNL,GAAIH,EAASG,GACbC,KAAMJ,EAASI,KACfN,QAASE,EAASF,QAClBO,MAAOL,EAASK,OAGrB,GAAE,CAACV,IAEJ,IAAMe,EAAe,SAACC,GACpBL,GAAW,kBAAKR,GAAN,cAAgBa,EAAEC,OAAOR,KAAOO,EAAEC,OAAOC,QACpD,EAcKC,EAAc,SAACH,GACnBH,GAAQ,kBAAKD,GAAN,cAAaI,EAAEC,OAAOR,KAAOO,EAAEC,OAAOC,QAC9C,EAED,OACE,iBAAKE,UAAU,iBAAf,WACE,eAAIA,UAAU,sCAAd,SACGpB,EAAa,eAAiB,wBAGjC,kBAAMqB,SAtBY,SAACL,GAErB,GADAA,EAAEM,iBACGtB,EAIE,CACL,IAAMuB,GAAM,kBAAQX,GAAR,IAAcJ,GAAIH,EAASG,KACvCV,GAAS0B,EAAAA,EAAAA,IAAYD,GACtB,KAPgB,CACf,IAAME,GAAU,kBAAQtB,GAAR,IAAiBK,GAAIkB,KAAKC,QAC1C7B,GAAS8B,EAAAA,EAAAA,IAAWH,IACpBd,EAAW,CAAEH,GAAI,EAAGC,KAAM,GAAIN,QAAS,GAAIO,MAAO,IACnD,CAIF,EAYG,WACE,iBAAKU,UAAU,OAAf,WACE,kBAAOS,QAAQ,OAAOT,UAAU,aAAhC,mBAGA,kBACEU,KAAK,OACLV,UAAU,eACVZ,GAAG,OACHC,KAAK,OACLsB,YAAY,OACZb,MAAOlB,EAAaY,EAAKH,KAAON,EAAQM,KACxCuB,SAAU,SAAChB,GAAD,OAAQhB,EAAamB,EAAYH,GAAKD,EAAaC,EAAnD,EACViB,UAAQ,EACRC,aAAa,YAGjB,iBAAKd,UAAU,OAAf,WACE,kBAAOS,QAAQ,UAAUT,UAAU,aAAnC,yBAGA,kBACEU,KAAM,SACNrB,KAAK,UACLD,GAAG,OACHY,UAAU,eACVW,YAAY,aACZb,MAAOlB,EAAaY,EAAKT,QAAUA,EAAQA,QAC3C6B,SAAU,SAAChB,GAAD,OAAQhB,EAAamB,EAAYH,GAAKD,EAAaC,EAAnD,EACViB,UAAQ,EACRC,aAAa,YAGjB,iBAAKd,UAAU,OAAf,WACE,kBAAOS,QAAQ,QAAQT,UAAU,aAAjC,oBAGA,kBACEU,KAAK,QACLrB,KAAK,QACLD,GAAG,QACHY,UAAU,eACVW,YAAY,QACZb,MAAOlB,EAAaY,EAAKF,MAAQP,EAAQO,MACzCsB,SAAU,SAAChB,GAAD,OAAQhB,EAAamB,EAAYH,GAAKD,EAAaC,EAAnD,EACVkB,aAAa,YAGjB,gBAAKd,UAAU,OAAf,UACE,mBAAQA,UAAU,kBAAlB,SACGpB,EAAa,eAAiB,wBAM1C,C,mEChHc,SAASmC,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,CACjC,CDGS,CAAeA,IELT,SAA+BA,EAAKC,GACjD,IAAIG,EAAY,MAAPJ,EAAc,KAAyB,qBAAXK,QAA0BL,EAAIK,OAAOC,WAAaN,EAAI,cAE3F,GAAU,MAANI,EAAJ,CACA,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKZ,KAAQU,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKM,KAAKR,EAAGzB,QAETmB,GAAKQ,EAAKO,SAAWf,GAH4BS,GAAK,GAc9D,CATE,MAAOO,GACPN,GAAK,EACLH,EAAKS,CACP,CAAE,QACA,IACOP,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,QAG9C,CAFE,QACA,GAAIO,EAAI,MAAMH,CAChB,CACF,CAEA,OAAOC,CAxBe,CAyBxB,CFvBgC,CAAqBT,EAAKC,KAAM,EAAAiB,EAAA,GAA2BlB,EAAKC,IGLjF,WACb,MAAM,IAAIkB,UAAU,4IACtB,CHGsG,EACtG,C","sources":["components/ContactInput.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { addContact, editContact } from \"../features/contact/contactSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst ContactInput = () => {\r\n  const dispatch = useDispatch();\r\n  const editStatus = useSelector((state) => state.contact.editStatus.status);\r\n  const editData = useSelector((state) => state.contact.editStatus.data);\r\n\r\n  const [contact, setContact] = useState({\r\n    id: 0,\r\n    name: \"\",\r\n    contact: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n  const [edit, setEdit] = useState({\r\n    id: 0,\r\n    name: \"\",\r\n    contact: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (editStatus) {\r\n      setEdit({\r\n        id: editData.id,\r\n        name: editData.name,\r\n        contact: editData.contact,\r\n        email: editData.email,\r\n      });\r\n    }\r\n  }, [editStatus]);\r\n\r\n  const inputHandler = (e) => {\r\n    setContact({ ...contact, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (!editStatus) {\r\n      const newContact = { ...contact, id: Date.now() };\r\n      dispatch(addContact(newContact));\r\n      setContact({ id: 0, name: \"\", contact: \"\", email: \"\" });\r\n    } else {\r\n      const edited = { ...edit, id: editData.id };\r\n      dispatch(editContact(edited));\r\n    }\r\n  };\r\n\r\n  const editHandler = (e) => {\r\n    setEdit({ ...edit, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <h1 className=\"display-5 text-success text-center \">\r\n        {editStatus ? \"Edit Contact\" : \"Create New Contact\"}\r\n      </h1>\r\n\r\n      <form onSubmit={submitHandler}>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"name\" className=\"form-label\">\r\n            Name\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            placeholder=\"Name\"\r\n            value={editStatus ? edit.name : contact.name}\r\n            onChange={(e) => (editStatus ? editHandler(e) : inputHandler(e))}\r\n            required\r\n            autoComplete=\"off\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"contact\" className=\"form-label\">\r\n            Contact No\r\n          </label>\r\n          <input\r\n            type={\"number\"}\r\n            name=\"contact\"\r\n            id=\"name\"\r\n            className=\"form-control\"\r\n            placeholder=\"Contact no\"\r\n            value={editStatus ? edit.contact : contact.contact}\r\n            onChange={(e) => (editStatus ? editHandler(e) : inputHandler(e))}\r\n            required\r\n            autoComplete=\"off\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"email\" className=\"form-label\">\r\n            Email\r\n          </label>\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            className=\"form-control\"\r\n            placeholder=\"Email\"\r\n            value={editStatus ? edit.email : contact.email}\r\n            onChange={(e) => (editStatus ? editHandler(e) : inputHandler(e))}\r\n            autoComplete=\"off\"\r\n          />\r\n        </div>\r\n        <div className=\"mb-3\">\r\n          <button className=\"btn btn-primary\">\r\n            {editStatus ? \"Edit Contact\" : \"Save Contact\"}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactInput;\r\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["dispatch","useDispatch","editStatus","useSelector","state","contact","status","editData","data","useState","id","name","email","setContact","edit","setEdit","useEffect","inputHandler","e","target","value","editHandler","className","onSubmit","preventDefault","edited","editContact","newContact","Date","now","addContact","htmlFor","type","placeholder","onChange","required","autoComplete","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}